// 'export' робить клас доступним для імпорту в інших файлах.
// 'class Library<T extends { id: number }>' - це оголошення універсального (generic) класу.
// <T> - це "заповнювач" для будь-якого типу даних (наприклад, Book або User).
// 'extends { id: number }' - це обмеження. Воно означає, що будь-який тип T,
// який ми сюди передамо, ОБОВ'ЯЗКОВО повинен мати властивість 'id' типу number.
export class Library<T extends { id: number }> {
  // 'private' означає, що доступ до масиву 'items' є тільки всередині цього класу.
  // 'items: T[] = []' - створюємо порожній масив, який буде зберігати об'єкти типу T.
  private items: T[] = [];

  // Метод для додавання нового елемента в масив.
  // 'item: T' означає, що параметр 'item' буде того ж типу, що й 'T'.
  // ': void' означає, що метод нічого не повертає.
  addItem(item: T): void {
    // .push() - стандартний метод для додавання елемента в кінець масиву.
    this.items.push(item);
  }

  // Метод для отримання всього списку елементів.
  // ': T[]' означає, що метод повертає масив, заповнений об'єктами типу T.
  getAllItems(): T[] {
    return this.items;
  }

  // Метод для пошуку одного елемента за його унікальним ID.
  // Повертає знайдений елемент типу T або 'undefined', якщо нічого не знайдено.
  getItemById(id: number): T | undefined {
    // .find() - стандартний метод масиву, який повертає перший елемент,
    // що відповідає умові.
    return this.items.find((item) => item.id === id);
  }

  // Метод для повної заміни поточного списку елементів новим.
  // Це корисно, наприклад, при завантаженні даних з LocalStorage.
  setItems(items: T[]): void {
    this.items = items;
  }
}
