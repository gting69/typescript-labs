// 'export namespace Validation' створює групу функцій під спільною назвою "Validation".
// Це допомагає організувати код і уникнути конфліктів, якщо в іншому файлі буде функція з такою ж назвою.
export namespace Validation {
  // Функція для перевірки, чи поле не є порожнім.
  // Приймає рядок (value) і повертає true (якщо поле заповнене) або false (якщо порожнє).
  export function isRequired(value: string): boolean {
    // 'value.trim()' - це метод, який видаляє зайві пробіли з початку і кінця рядка.
    // ' !== '' ' - порівнює результат з порожнім рядком.
    // Якщо після видалення пробілів щось залишилось, функція поверне true.
    return value.trim() !== "";
  }

  // Функція для перевірки, чи є рядок коректним роком.
  // Приймає рядок (year) і повертає true або false.
  export function isYear(year: string): boolean {
    // 'const yearRegex = /.../' створює "регулярний вираз" - це шаблон для пошуку тексту.
    // ^ - початок рядка.
    // (1[0-9]{3} | 20[0-2][0-9]) - означає "або-або":
    //    - 1[0-9]{3}: цифра 1, за якою йдуть будь-які три цифри (роки від 1000 до 1999).
    //    - 20[0-2][0-9]: цифри 20, за якими йде цифра від 0 до 2, а потім будь-яка цифра (роки від 2000 до 2029).
    // $ - кінець рядка.
    const yearRegex = /^(1[0-9]{3}|20[0-2][0-9])$/;
    // 'yearRegex.test(year)' перевіряє, чи відповідає рядок 'year' нашому шаблону.
    return yearRegex.test(year);
  }

  // Функція для перевірки, чи є рядок коректною email-адресою.
  export function isEmail(email: string): boolean {
    // Це стандартний, хоча і спрощений, регулярний вираз для перевірки email.
    // Він перевіряє наявність символів до "@", самого символу "@",
    // символів після "@", крапки, і символів після крапки.
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    // Перевіряємо рядок 'email' на відповідність шаблону.
    return emailRegex.test(email);
  }
}
